
Smart Home Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00000bc4  00000c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002367  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cf3  00000000  00000000  0000330b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016b6  00000000  00000000  00003ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000368  00000000  00000000  000056b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a5  00000000  00000000  00005a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001489  00000000  00000000  00005fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  0000744a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_1>
   8:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b0 02 	call	0x560	; 0x560 <main>
  7a:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_2>:



// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
	int x;
	for(x=0;x<7;x++)
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	0f c0       	rjmp	.+30     	; 0xba <__vector_2+0x38>
	{
		toggelbit(PORTA,5);
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	89 27       	eor	r24, r25
  a2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	4f e9       	ldi	r20, 0x9F	; 159
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	41 50       	subi	r20, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <__vector_2+0x28>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_2+0x32>
  b4:	00 00       	nop

// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
	int x;
	for(x=0;x<7;x++)
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	27 30       	cpi	r18, 0x07	; 7
  bc:	31 05       	cpc	r19, r1
  be:	74 f3       	brlt	.-36     	; 0x9c <__vector_2+0x1a>
	{
		toggelbit(PORTA,5);
		_delay_ms(500);
	}
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	4f 91       	pop	r20
  c6:	3f 91       	pop	r19
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_1>:

// int0 --> clear bit 5
ISR(INT0_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	clearbit(PORTA,5);
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <keypad_init>:
	 // 4rows p0 p1 p2 p3    output power
	 //columns p4 p5 p6 p7   input  reading pin
	 
	 
	 ///////////////////////  output pins //////////////////////////////
	 setbit(keypad_out_dir,0);    //DDRA
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	84 bb       	out	0x14, r24	; 20
	 setbit(keypad_out_dir,1);
  f8:	84 b3       	in	r24, 0x14	; 20
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	84 bb       	out	0x14, r24	; 20
	 setbit(keypad_out_dir,2);
  fe:	84 b3       	in	r24, 0x14	; 20
 100:	84 60       	ori	r24, 0x04	; 4
 102:	84 bb       	out	0x14, r24	; 20
	 setbit(keypad_out_dir,3);
 104:	84 b3       	in	r24, 0x14	; 20
 106:	88 60       	ori	r24, 0x08	; 8
 108:	84 bb       	out	0x14, r24	; 20
	 /////////////////// input pins /////////////////////////////////////
	 clearbit(keypad_in_dir,4);
 10a:	84 b3       	in	r24, 0x14	; 20
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	84 bb       	out	0x14, r24	; 20
	 clearbit(keypad_in_dir,5);
 110:	84 b3       	in	r24, 0x14	; 20
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	84 bb       	out	0x14, r24	; 20
	 clearbit(keypad_in_dir,6);
 116:	84 b3       	in	r24, 0x14	; 20
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	84 bb       	out	0x14, r24	; 20
	 clearbit(keypad_in_dir,7);
 11c:	84 b3       	in	r24, 0x14	; 20
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	84 bb       	out	0x14, r24	; 20
	 ///////////////// internal pull up resistor for input pins /////////////////////////////
	 //input power
	 
	 setbit(keypad_in_port,4); // porta = 0000100  -- > pull up  input & port output
 122:	85 b3       	in	r24, 0x15	; 21
 124:	80 61       	ori	r24, 0x10	; 16
 126:	85 bb       	out	0x15, r24	; 21
	 setbit(keypad_in_port,5);
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	85 bb       	out	0x15, r24	; 21
	 setbit(keypad_in_port,6);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	80 64       	ori	r24, 0x40	; 64
 132:	85 bb       	out	0x15, r24	; 21
	 setbit(keypad_in_port,7);// noise
 134:	85 b3       	in	r24, 0x15	; 21
 136:	80 68       	ori	r24, 0x80	; 128
 138:	85 bb       	out	0x15, r24	; 21
 13a:	08 95       	ret

0000013c <switch_output>:

 void switch_output(int x)
 {
	 //power loop function for rows
	 
	 switch(x)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	b9 f0       	breq	.+46     	; 0x170 <switch_output+0x34>
 142:	1c f4       	brge	.+6      	; 0x14a <switch_output+0xe>
 144:	89 2b       	or	r24, r25
 146:	39 f0       	breq	.+14     	; 0x156 <switch_output+0x1a>
 148:	08 95       	ret
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	91 05       	cpc	r25, r1
 14e:	e9 f0       	breq	.+58     	; 0x18a <switch_output+0x4e>
 150:	03 97       	sbiw	r24, 0x03	; 3
 152:	41 f1       	breq	.+80     	; 0x1a4 <switch_output+0x68>
 154:	08 95       	ret
	 {   // output r0 r1 r2 r3  high to low
		 case 0:
		 clearbit(keypad_out_port,0);  //r0 low
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,1);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,2);
 162:	85 b3       	in	r24, 0x15	; 21
 164:	84 60       	ori	r24, 0x04	; 4
 166:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,3);
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	85 bb       	out	0x15, r24	; 21
		 break;
 16e:	08 95       	ret
		 case 1:
		 clearbit(keypad_out_port,1); // r1 low
 170:	85 b3       	in	r24, 0x15	; 21
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,0);
 176:	85 b3       	in	r24, 0x15	; 21
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,2);
 17c:	85 b3       	in	r24, 0x15	; 21
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,3);
 182:	85 b3       	in	r24, 0x15	; 21
 184:	88 60       	ori	r24, 0x08	; 8
 186:	85 bb       	out	0x15, r24	; 21
		 break;
 188:	08 95       	ret
		 case 2:
		 clearbit(keypad_out_port,2); // r2 low
 18a:	85 b3       	in	r24, 0x15	; 21
 18c:	8b 7f       	andi	r24, 0xFB	; 251
 18e:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,0);
 190:	85 b3       	in	r24, 0x15	; 21
 192:	81 60       	ori	r24, 0x01	; 1
 194:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,1);
 196:	85 b3       	in	r24, 0x15	; 21
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,3);
 19c:	85 b3       	in	r24, 0x15	; 21
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	85 bb       	out	0x15, r24	; 21
		 break;
 1a2:	08 95       	ret
		 case 3:
		 clearbit(keypad_out_port,3); //r3 low
 1a4:	85 b3       	in	r24, 0x15	; 21
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,0);
 1aa:	85 b3       	in	r24, 0x15	; 21
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,1);
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,2);
 1b6:	85 b3       	in	r24, 0x15	; 21
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	08 95       	ret

000001be <get_key_value>:




 char get_key_value(void)
 {
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
	 char key = notpressed; // 255 
	 int i=0;
 1c4:	00 e0       	ldi	r16, 0x00	; 0
 1c6:	10 e0       	ldi	r17, 0x00	; 0



 char get_key_value(void)
 {
	 char key = notpressed; // 255 
 1c8:	cf ef       	ldi	r28, 0xFF	; 255
	 int i=0;
	 while(key == notpressed && i<3)// key = '1' break condition
 1ca:	6e c0       	rjmp	.+220    	; 0x2a8 <get_key_value+0xea>
	 {
		 i++;
 1cc:	0f 5f       	subi	r16, 0xFF	; 255
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
		 switch_output(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 9e 00 	call	0x13c	; 0x13c <switch_output>
		 if (readbit(keypad_in_pin,4)==0)// pull up power--> low
 1d8:	9c 99       	sbic	0x13, 4	; 19
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <get_key_value+0x26>
		 {
			 key ='7';// char
			 while(readbit(keypad_in_pin,4)==0);// skip loop infinte
 1dc:	9c 9b       	sbis	0x13, 4	; 19
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <get_key_value+0x1e>
	 {
		 i++;
		 switch_output(0);
		 if (readbit(keypad_in_pin,4)==0)// pull up power--> low
		 {
			 key ='7';// char
 1e0:	c7 e3       	ldi	r28, 0x37	; 55
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <get_key_value+0x48>
			 while(readbit(keypad_in_pin,4)==0);// skip loop infinte
			 // there is no pressing anymore
		 }
		 else if (readbit(keypad_in_pin,5)==0)
 1e4:	9d 99       	sbic	0x13, 5	; 19
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <get_key_value+0x32>
		 {
			 key ='8';
			 while(readbit(keypad_in_pin,5)==0);
 1e8:	9d 9b       	sbis	0x13, 5	; 19
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <get_key_value+0x2a>
			 while(readbit(keypad_in_pin,4)==0);// skip loop infinte
			 // there is no pressing anymore
		 }
		 else if (readbit(keypad_in_pin,5)==0)
		 {
			 key ='8';
 1ec:	c8 e3       	ldi	r28, 0x38	; 56
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <get_key_value+0x48>
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
 1f0:	9e 99       	sbic	0x13, 6	; 19
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <get_key_value+0x3e>
		 {
			 key ='9';
			 while(readbit(keypad_in_pin,6)==0);
 1f4:	9e 9b       	sbis	0x13, 6	; 19
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <get_key_value+0x36>
			 key ='8';
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
		 {
			 key ='9';
 1f8:	c9 e3       	ldi	r28, 0x39	; 57
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <get_key_value+0x48>
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
 1fc:	9f 99       	sbic	0x13, 7	; 19
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <get_key_value+0x48>
		 {
			 key ='/';
			 while(readbit(keypad_in_pin,7)==0);
 200:	9f 9b       	sbis	0x13, 7	; 19
 202:	fe cf       	rjmp	.-4      	; 0x200 <get_key_value+0x42>
			 key ='9';
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
		 {
			 key ='/';
 204:	cf e2       	ldi	r28, 0x2F	; 47
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(1);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 9e 00 	call	0x13c	; 0x13c <switch_output>
		 if (readbit(keypad_in_pin,4)==0)
 20e:	9c 99       	sbic	0x13, 4	; 19
 210:	04 c0       	rjmp	.+8      	; 0x21a <get_key_value+0x5c>
		 {
			 key ='4';
			 while(readbit(keypad_in_pin,4)==0);
 212:	9c 9b       	sbis	0x13, 4	; 19
 214:	fe cf       	rjmp	.-4      	; 0x212 <get_key_value+0x54>
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(1);
		 if (readbit(keypad_in_pin,4)==0)
		 {
			 key ='4';
 216:	c4 e3       	ldi	r28, 0x34	; 52
 218:	11 c0       	rjmp	.+34     	; 0x23c <get_key_value+0x7e>
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
 21a:	9d 99       	sbic	0x13, 5	; 19
 21c:	04 c0       	rjmp	.+8      	; 0x226 <get_key_value+0x68>
		 {
			 key ='5';
			 while(readbit(keypad_in_pin,5)==0);
 21e:	9d 9b       	sbis	0x13, 5	; 19
 220:	fe cf       	rjmp	.-4      	; 0x21e <get_key_value+0x60>
			 key ='4';
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
		 {
			 key ='5';
 222:	c5 e3       	ldi	r28, 0x35	; 53
 224:	0b c0       	rjmp	.+22     	; 0x23c <get_key_value+0x7e>
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
 226:	9e 99       	sbic	0x13, 6	; 19
 228:	04 c0       	rjmp	.+8      	; 0x232 <get_key_value+0x74>
		 {
			 key ='6';
			 while(readbit(keypad_in_pin,6)==0);
 22a:	9e 9b       	sbis	0x13, 6	; 19
 22c:	fe cf       	rjmp	.-4      	; 0x22a <get_key_value+0x6c>
			 key ='5';
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
		 {
			 key ='6';
 22e:	c6 e3       	ldi	r28, 0x36	; 54
 230:	05 c0       	rjmp	.+10     	; 0x23c <get_key_value+0x7e>
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
 232:	9f 99       	sbic	0x13, 7	; 19
 234:	03 c0       	rjmp	.+6      	; 0x23c <get_key_value+0x7e>
		 {
			 key ='*';
			 while(readbit(keypad_in_pin,7)==0);
 236:	9f 9b       	sbis	0x13, 7	; 19
 238:	fe cf       	rjmp	.-4      	; 0x236 <get_key_value+0x78>
			 key ='6';
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
		 {
			 key ='*';
 23a:	ca e2       	ldi	r28, 0x2A	; 42
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(2);
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 9e 00 	call	0x13c	; 0x13c <switch_output>
		 if (readbit(keypad_in_pin,4)==0)
 244:	9c 99       	sbic	0x13, 4	; 19
 246:	04 c0       	rjmp	.+8      	; 0x250 <get_key_value+0x92>
		 {
			 key ='1';
			 while(readbit(keypad_in_pin,4)==0);
 248:	9c 9b       	sbis	0x13, 4	; 19
 24a:	fe cf       	rjmp	.-4      	; 0x248 <get_key_value+0x8a>
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(2);
		 if (readbit(keypad_in_pin,4)==0)
		 {
			 key ='1';
 24c:	c1 e3       	ldi	r28, 0x31	; 49
 24e:	11 c0       	rjmp	.+34     	; 0x272 <get_key_value+0xb4>
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
 250:	9d 99       	sbic	0x13, 5	; 19
 252:	04 c0       	rjmp	.+8      	; 0x25c <get_key_value+0x9e>
		 {
			 key ='2';
			 while(readbit(keypad_in_pin,5)==0);
 254:	9d 9b       	sbis	0x13, 5	; 19
 256:	fe cf       	rjmp	.-4      	; 0x254 <get_key_value+0x96>
			 key ='1';
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
		 {
			 key ='2';
 258:	c2 e3       	ldi	r28, 0x32	; 50
 25a:	0b c0       	rjmp	.+22     	; 0x272 <get_key_value+0xb4>
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
 25c:	9e 99       	sbic	0x13, 6	; 19
 25e:	04 c0       	rjmp	.+8      	; 0x268 <get_key_value+0xaa>
		 {
			 key ='3';
			 while(readbit(keypad_in_pin,6)==0);
 260:	9e 9b       	sbis	0x13, 6	; 19
 262:	fe cf       	rjmp	.-4      	; 0x260 <get_key_value+0xa2>
			 key ='2';
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
		 {
			 key ='3';
 264:	c3 e3       	ldi	r28, 0x33	; 51
 266:	05 c0       	rjmp	.+10     	; 0x272 <get_key_value+0xb4>
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
 268:	9f 99       	sbic	0x13, 7	; 19
 26a:	03 c0       	rjmp	.+6      	; 0x272 <get_key_value+0xb4>
		 {
			 key ='-';
			 while(readbit(keypad_in_pin,7)==0);
 26c:	9f 9b       	sbis	0x13, 7	; 19
 26e:	fe cf       	rjmp	.-4      	; 0x26c <get_key_value+0xae>
			 key ='3';
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
		 {
			 key ='-';
 270:	cd e2       	ldi	r28, 0x2D	; 45
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(3);
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 9e 00 	call	0x13c	; 0x13c <switch_output>
		 if (readbit(keypad_in_pin,4)==0)
 27a:	9c 99       	sbic	0x13, 4	; 19
 27c:	04 c0       	rjmp	.+8      	; 0x286 <get_key_value+0xc8>
		 {
			 key ='C';
			 while(readbit(keypad_in_pin,4)==0);
 27e:	9c 9b       	sbis	0x13, 4	; 19
 280:	fe cf       	rjmp	.-4      	; 0x27e <get_key_value+0xc0>
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(3);
		 if (readbit(keypad_in_pin,4)==0)
		 {
			 key ='C';
 282:	c3 e4       	ldi	r28, 0x43	; 67
 284:	11 c0       	rjmp	.+34     	; 0x2a8 <get_key_value+0xea>
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
 286:	9d 99       	sbic	0x13, 5	; 19
 288:	04 c0       	rjmp	.+8      	; 0x292 <get_key_value+0xd4>
		 {
			 key ='0';
			 while(readbit(keypad_in_pin,5)==0);
 28a:	9d 9b       	sbis	0x13, 5	; 19
 28c:	fe cf       	rjmp	.-4      	; 0x28a <get_key_value+0xcc>
			 key ='C';
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
		 {
			 key ='0';
 28e:	c0 e3       	ldi	r28, 0x30	; 48
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <get_key_value+0xea>
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
 292:	9e 99       	sbic	0x13, 6	; 19
 294:	04 c0       	rjmp	.+8      	; 0x29e <get_key_value+0xe0>
		 {
			 key ='=';
			 while(readbit(keypad_in_pin,6)==0);
 296:	9e 9b       	sbis	0x13, 6	; 19
 298:	fe cf       	rjmp	.-4      	; 0x296 <get_key_value+0xd8>
			 key ='0';
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
		 {
			 key ='=';
 29a:	cd e3       	ldi	r28, 0x3D	; 61
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <get_key_value+0xea>
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
 29e:	9f 99       	sbic	0x13, 7	; 19
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <get_key_value+0xea>
		 {
			 key ='+';
			 while(readbit(keypad_in_pin,7)==0);
 2a2:	9f 9b       	sbis	0x13, 7	; 19
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <get_key_value+0xe4>
			 key ='=';
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
		 {
			 key ='+';
 2a6:	cb e2       	ldi	r28, 0x2B	; 43

 char get_key_value(void)
 {
	 char key = notpressed; // 255 
	 int i=0;
	 while(key == notpressed && i<3)// key = '1' break condition
 2a8:	cf 3f       	cpi	r28, 0xFF	; 255
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <get_key_value+0xf6>
 2ac:	03 30       	cpi	r16, 0x03	; 3
 2ae:	11 05       	cpc	r17, r1
 2b0:	0c f4       	brge	.+2      	; 0x2b4 <get_key_value+0xf6>
 2b2:	8c cf       	rjmp	.-232    	; 0x1cc <get_key_value+0xe>
			 while(readbit(keypad_in_pin,7)==0);
		 }
	 }
	 return key;
	 
 2b4:	8c 2f       	mov	r24, r28
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <LCD_send_data_4bit>:
}

void LCD_Next_Line(void)
{LCD_send_command_4bit(0xC0);}
void LCD_Shift_Right(void)
{LCD_send_command_4bit(0x14);}
 2be:	9b b3       	in	r25, 0x1b	; 27
 2c0:	9f 70       	andi	r25, 0x0F	; 15
 2c2:	28 2f       	mov	r18, r24
 2c4:	20 7f       	andi	r18, 0xF0	; 240
 2c6:	92 2b       	or	r25, r18
 2c8:	9b bb       	out	0x1b, r25	; 27
 2ca:	98 b3       	in	r25, 0x18	; 24
 2cc:	92 60       	ori	r25, 0x02	; 2
 2ce:	98 bb       	out	0x18, r25	; 24
 2d0:	98 b3       	in	r25, 0x18	; 24
 2d2:	9b 7f       	andi	r25, 0xFB	; 251
 2d4:	98 bb       	out	0x18, r25	; 24
 2d6:	98 b3       	in	r25, 0x18	; 24
 2d8:	98 60       	ori	r25, 0x08	; 8
 2da:	98 bb       	out	0x18, r25	; 24
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_send_data_4bit+0x20>
 2de:	00 00       	nop
 2e0:	98 b3       	in	r25, 0x18	; 24
 2e2:	97 7f       	andi	r25, 0xF7	; 247
 2e4:	98 bb       	out	0x18, r25	; 24
 2e6:	32 e4       	ldi	r19, 0x42	; 66
 2e8:	3a 95       	dec	r19
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_send_data_4bit+0x2a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_send_data_4bit+0x30>
 2ee:	2b b3       	in	r18, 0x1b	; 27
 2f0:	30 e1       	ldi	r19, 0x10	; 16
 2f2:	83 9f       	mul	r24, r19
 2f4:	c0 01       	movw	r24, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	92 2f       	mov	r25, r18
 2fa:	9f 70       	andi	r25, 0x0F	; 15
 2fc:	89 2b       	or	r24, r25
 2fe:	8b bb       	out	0x1b, r24	; 27
 300:	88 b3       	in	r24, 0x18	; 24
 302:	88 60       	ori	r24, 0x08	; 8
 304:	88 bb       	out	0x18, r24	; 24
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_send_data_4bit+0x4a>
 308:	00 00       	nop
 30a:	88 b3       	in	r24, 0x18	; 24
 30c:	87 7f       	andi	r24, 0xF7	; 247
 30e:	88 bb       	out	0x18, r24	; 24
 310:	8d ee       	ldi	r24, 0xED	; 237
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_send_data_4bit+0x56>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_send_data_4bit+0x5c>
 31a:	00 00       	nop
 31c:	08 95       	ret

0000031e <LCD_send_command_4bit>:
 31e:	9b b3       	in	r25, 0x1b	; 27
 320:	9f 70       	andi	r25, 0x0F	; 15
 322:	28 2f       	mov	r18, r24
 324:	20 7f       	andi	r18, 0xF0	; 240
 326:	92 2b       	or	r25, r18
 328:	9b bb       	out	0x1b, r25	; 27
 32a:	98 b3       	in	r25, 0x18	; 24
 32c:	9d 7f       	andi	r25, 0xFD	; 253
 32e:	98 bb       	out	0x18, r25	; 24
 330:	98 b3       	in	r25, 0x18	; 24
 332:	9b 7f       	andi	r25, 0xFB	; 251
 334:	98 bb       	out	0x18, r25	; 24
 336:	98 b3       	in	r25, 0x18	; 24
 338:	98 60       	ori	r25, 0x08	; 8
 33a:	98 bb       	out	0x18, r25	; 24
 33c:	00 c0       	rjmp	.+0      	; 0x33e <LCD_send_command_4bit+0x20>
 33e:	00 00       	nop
 340:	98 b3       	in	r25, 0x18	; 24
 342:	97 7f       	andi	r25, 0xF7	; 247
 344:	98 bb       	out	0x18, r25	; 24
 346:	32 e4       	ldi	r19, 0x42	; 66
 348:	3a 95       	dec	r19
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_send_command_4bit+0x2a>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_send_command_4bit+0x30>
 34e:	2b b3       	in	r18, 0x1b	; 27
 350:	30 e1       	ldi	r19, 0x10	; 16
 352:	83 9f       	mul	r24, r19
 354:	c0 01       	movw	r24, r0
 356:	11 24       	eor	r1, r1
 358:	92 2f       	mov	r25, r18
 35a:	9f 70       	andi	r25, 0x0F	; 15
 35c:	89 2b       	or	r24, r25
 35e:	8b bb       	out	0x1b, r24	; 27
 360:	88 b3       	in	r24, 0x18	; 24
 362:	88 60       	ori	r24, 0x08	; 8
 364:	88 bb       	out	0x18, r24	; 24
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_send_command_4bit+0x4a>
 368:	00 00       	nop
 36a:	88 b3       	in	r24, 0x18	; 24
 36c:	87 7f       	andi	r24, 0xF7	; 247
 36e:	88 bb       	out	0x18, r24	; 24
 370:	8d ee       	ldi	r24, 0xED	; 237
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCD_send_command_4bit+0x56>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_send_command_4bit+0x5c>
 37a:	00 00       	nop
 37c:	08 95       	ret

0000037e <LCD_Next_Line>:
 37e:	80 ec       	ldi	r24, 0xC0	; 192
 380:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 384:	08 95       	ret

00000386 <LCD_Shift_Left>:
void LCD_Shift_Left(void)
{LCD_send_command_4bit(0x10);}
 386:	80 e1       	ldi	r24, 0x10	; 16
 388:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 38c:	08 95       	ret

0000038e <LCD_Clear>:
void LCD_Clear(void)
{LCD_send_command_4bit(0x01);}
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 394:	08 95       	ret

00000396 <LCD_Home>:
void LCD_Home(void)
{LCD_send_command_4bit(0x02);}
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 39c:	08 95       	ret

0000039e <LCD_INIT_4bit>:


void LCD_INIT_4bit(void)
{
	LCD_DATA_DIR|= 0xf0;
 39e:	8a b3       	in	r24, 0x1a	; 26
 3a0:	80 6f       	ori	r24, 0xF0	; 240
 3a2:	8a bb       	out	0x1a, r24	; 26
	setbit(LCD_control_DIR,EN);
 3a4:	87 b3       	in	r24, 0x17	; 23
 3a6:	88 60       	ori	r24, 0x08	; 8
 3a8:	87 bb       	out	0x17, r24	; 23
	setbit(LCD_control_DIR,RS);
 3aa:	87 b3       	in	r24, 0x17	; 23
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	87 bb       	out	0x17, r24	; 23
	setbit(LCD_control_DIR,RW);
 3b0:	87 b3       	in	r24, 0x17	; 23
 3b2:	84 60       	ori	r24, 0x04	; 4
 3b4:	87 bb       	out	0x17, r24	; 23
	LCD_send_command_4bit(0x02);// return home
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
	LCD_send_command_4bit(0x28);// 2 line  and 4 bit mode
 3bc:	88 e2       	ldi	r24, 0x28	; 40
 3be:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
	LCD_send_command_4bit(0x0c);// display on
 3c2:	8c e0       	ldi	r24, 0x0C	; 12
 3c4:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
	LCD_send_command_4bit(0x06);// auto increment
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
	LCD_send_command_4bit(0x01);// clear screen
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 3d4:	87 e8       	ldi	r24, 0x87	; 135
 3d6:	93 e1       	ldi	r25, 0x13	; 19
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCD_INIT_4bit+0x3a>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCD_INIT_4bit+0x40>
 3de:	00 00       	nop
 3e0:	08 95       	ret

000003e2 <LCD_send_string_4bit>:
	_delay_ms(20);
	
	
}
void LCD_send_string_4bit( char* str)
{
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	8c 01       	movw	r16, r24
	int count =0;
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[count]!=0)
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <LCD_send_string_4bit+0x16>
	{
		LCD_send_data_4bit(str[count]);
 3f2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_send_data_4bit>
		count++;
 3f6:	21 96       	adiw	r28, 0x01	; 1
	
}
void LCD_send_string_4bit( char* str)
{
	int count =0;
	while(str[count]!=0)
 3f8:	f8 01       	movw	r30, r16
 3fa:	ec 0f       	add	r30, r28
 3fc:	fd 1f       	adc	r31, r29
 3fe:	80 81       	ld	r24, Z
 400:	81 11       	cpse	r24, r1
 402:	f7 cf       	rjmp	.-18     	; 0x3f2 <LCD_send_string_4bit+0x10>
	{
		LCD_send_data_4bit(str[count]);
		count++;
	}
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <Int_ASC>:

void Int_ASC(unsigned int ab)
{
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
 41a:	28 97       	sbiw	r28, 0x08	; 8
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	fc 01       	movw	r30, r24
	int i;
	int array[4]; // array arrange data
	for(i=0; i<=3; i++)                  /* Convert decimal to ASCII                     */
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	33 c0       	rjmp	.+102    	; 0x494 <Int_ASC+0x86>
	{	// 35% 10 ==> 5
		array[i] = ab%10; // remainder  500   10 % 10 ==> 0  -->
 42e:	9f 01       	movw	r18, r30
 430:	ad ec       	ldi	r26, 0xCD	; 205
 432:	bc ec       	ldi	r27, 0xCC	; 204
 434:	0e 94 d1 05 	call	0xba2	; 0xba2 <__umulhisi3>
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
 43c:	96 95       	lsr	r25
 43e:	87 95       	ror	r24
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	9c 01       	movw	r18, r24
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	82 0f       	add	r24, r18
 458:	93 1f       	adc	r25, r19
 45a:	9f 01       	movw	r18, r30
 45c:	28 1b       	sub	r18, r24
 45e:	39 0b       	sbc	r19, r25
 460:	c9 01       	movw	r24, r18
 462:	da 01       	movw	r26, r20
 464:	aa 0f       	add	r26, r26
 466:	bb 1f       	adc	r27, r27
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	2c 0f       	add	r18, r28
 46e:	3d 1f       	adc	r19, r29
 470:	a2 0f       	add	r26, r18
 472:	b3 1f       	adc	r27, r19
 474:	8d 93       	st	X+, r24
 476:	9c 93       	st	X, r25
		//array[0]  last ab = 1 (1 % 10)==> 1 --> array[1]
		// 0 % 10 = 0 --> 0%10 = 0
		ab       = ab/10; // ab = 10/10 = 1 --> 1/10 ==> 0 int
 478:	9f 01       	movw	r18, r30
 47a:	ad ec       	ldi	r26, 0xCD	; 205
 47c:	bc ec       	ldi	r27, 0xCC	; 204
 47e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__umulhisi3>
 482:	fc 01       	movw	r30, r24
 484:	f6 95       	lsr	r31
 486:	e7 95       	ror	r30
 488:	f6 95       	lsr	r31
 48a:	e7 95       	ror	r30
 48c:	f6 95       	lsr	r31
 48e:	e7 95       	ror	r30

void Int_ASC(unsigned int ab)
{
	int i;
	int array[4]; // array arrange data
	for(i=0; i<=3; i++)                  /* Convert decimal to ASCII                     */
 490:	4f 5f       	subi	r20, 0xFF	; 255
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	44 30       	cpi	r20, 0x04	; 4
 496:	51 05       	cpc	r21, r1
 498:	54 f2       	brlt	.-108    	; 0x42e <Int_ASC+0x20>
 49a:	04 e0       	ldi	r16, 0x04	; 4
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	1a c0       	rjmp	.+52     	; 0x4d8 <Int_ASC+0xca>
		//  5300
	}
	int k=4;
	for(i=3; i>=0; i--)
	{
		if(array[i]!=0 || i==0)
 4a4:	fc 01       	movw	r30, r24
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	2c 0f       	add	r18, r28
 4b0:	3d 1f       	adc	r19, r29
 4b2:	e2 0f       	add	r30, r18
 4b4:	f3 1f       	adc	r31, r19
 4b6:	20 81       	ld	r18, Z
 4b8:	31 81       	ldd	r19, Z+1	; 0x01
 4ba:	23 2b       	or	r18, r19
 4bc:	29 f4       	brne	.+10     	; 0x4c8 <Int_ASC+0xba>
 4be:	00 97       	sbiw	r24, 0x00	; 0
 4c0:	31 f0       	breq	.+12     	; 0x4ce <Int_ASC+0xc0>
 4c2:	9c 01       	movw	r18, r24
 4c4:	c8 01       	movw	r24, r16
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <Int_ASC+0xc4>
		{k=i;i=0;}
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <Int_ASC+0xc4>
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
		// 0100
		// 0010
		//  5300
	}
	int k=4;
	for(i=3; i>=0; i--)
 4d2:	8c 01       	movw	r16, r24
 4d4:	c9 01       	movw	r24, r18
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	99 23       	and	r25, r25
 4da:	24 f7       	brge	.-56     	; 0x4a4 <Int_ASC+0x96>
 4dc:	0f c0       	rjmp	.+30     	; 0x4fc <Int_ASC+0xee>

	}
	
	for(i=k; i>=0; i--)
	{
		LCD_send_data_4bit(array[i]+'0');
 4de:	f8 01       	movw	r30, r16
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	8c 0f       	add	r24, r28
 4ea:	9d 1f       	adc	r25, r29
 4ec:	e8 0f       	add	r30, r24
 4ee:	f9 1f       	adc	r31, r25
 4f0:	80 81       	ld	r24, Z
 4f2:	80 5d       	subi	r24, 0xD0	; 208
 4f4:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_send_data_4bit>
		if(array[i]!=0 || i==0)
		{k=i;i=0;}

	}
	
	for(i=k; i>=0; i--)
 4f8:	01 50       	subi	r16, 0x01	; 1
 4fa:	11 09       	sbc	r17, r1
 4fc:	11 23       	and	r17, r17
 4fe:	7c f7       	brge	.-34     	; 0x4de <Int_ASC+0xd0>
		// 0 0 1 0
		// sending no : 48 ====> '0'
		// 0 1 2 3 ---> 9
		// 48 49 50 ---> end
	}
}
 500:	28 96       	adiw	r28, 0x08	; 8
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	08 95       	ret

00000516 <SPI_Init>:
//1-init
//2-function send
//3-function recive
void SPI_Init()					/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);	//Make MOSI, SCK, SS as Output pin
 516:	87 b3       	in	r24, 0x17	; 23
 518:	80 6b       	ori	r24, 0xB0	; 176
 51a:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);			// Make MISO pin as input pin
 51c:	87 b3       	in	r24, 0x17	; 23
 51e:	8f 7b       	andi	r24, 0xBF	; 191
 520:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<SS);			// Make high on SS pin
 522:	88 b3       	in	r24, 0x18	; 24
 524:	80 61       	ori	r24, 0x10	; 16
 526:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	// Enable SPI in master mode with Fosc/16
 528:	81 e5       	ldi	r24, 0x51	; 81
 52a:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X);			// Disable speed doubler
 52c:	8e b1       	in	r24, 0x0e	; 14
 52e:	8e 7f       	andi	r24, 0xFE	; 254
 530:	8e b9       	out	0x0e, r24	; 14
	PORTB &=~(1<<SS);  //Deselect
 532:	88 b3       	in	r24, 0x18	; 24
 534:	8f 7e       	andi	r24, 0xEF	; 239
 536:	88 bb       	out	0x18, r24	; 24
 538:	08 95       	ret

0000053a <SPI_Write>:


void SPI_Write(unsigned char data)		/* SPI write data function */
{
	
	SPDR = data;			/* Write data to SPI data register */
 53a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
 53c:	77 9b       	sbis	0x0e, 7	; 14
 53e:	fe cf       	rjmp	.-4      	; 0x53c <SPI_Write+0x2>
	
	
}
 540:	08 95       	ret

00000542 <SPI_Read>:


char SPI_Read()				/* SPI read data function */
{
	SPDR = 0xFF;
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
 546:	77 9b       	sbis	0x0e, 7	; 14
 548:	fe cf       	rjmp	.-4      	; 0x546 <SPI_Read+0x4>
	return(SPDR);			/* Return received data */
 54a:	8f b1       	in	r24, 0x0f	; 15
}
 54c:	08 95       	ret

0000054e <UART_INIT>:
// baude rate : speed of sending data    bit per second bps
// table of speed of baude rate: 3Mbps ~ 4800 bps (9600 bps) 9600 )
// 
void UART_INIT(unsigned int baud)//103  479 10101010101
{// 8 bit data 1 stop bit 
	UCSRB |= (1 << RXEN) | (1 << TXEN);	// Enable UART transmitter and receiver
 54e:	2a b1       	in	r18, 0x0a	; 10
 550:	28 61       	ori	r18, 0x18	; 24
 552:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	//8 bit data and 1 stop bit
 554:	20 b5       	in	r18, 0x20	; 32
 556:	26 68       	ori	r18, 0x86	; 134
 558:	20 bd       	out	0x20, r18	; 32
	UBRRL = baud;//lower
 55a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (baud >> 8);//higher 
 55c:	90 bd       	out	0x20, r25	; 32
 55e:	08 95       	ret

00000560 <main>:
 560:	2f ef       	ldi	r18, 0xFF	; 255
 562:	89 e6       	ldi	r24, 0x69	; 105
 564:	98 e1       	ldi	r25, 0x18	; 24
 566:	21 50       	subi	r18, 0x01	; 1
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <main+0x6>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x10>
 570:	00 00       	nop
void User_login(void);

int main(void)
{
	_delay_ms(500);
	LCD_INIT_4bit();    // init lcd
 572:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_INIT_4bit>
	keypad_init();      // define key pad   //1//
 576:	0e 94 79 00 	call	0xf2	; 0xf2 <keypad_init>
	UART_INIT(103);
 57a:	87 e6       	ldi	r24, 0x67	; 103
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 a7 02 	call	0x54e	; 0x54e <UART_INIT>
	SPI_Init();
 582:	0e 94 8b 02 	call	0x516	; 0x516 <SPI_Init>

	LCD_Clear();
 586:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
	LCD_Home();
 58a:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
	LCD_send_string_4bit("Smart Home Proj.");
 58e:	80 e6       	ldi	r24, 0x60	; 96
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
 596:	2f ef       	ldi	r18, 0xFF	; 255
 598:	83 ed       	ldi	r24, 0xD3	; 211
 59a:	90 e3       	ldi	r25, 0x30	; 48
 59c:	21 50       	subi	r18, 0x01	; 1
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	90 40       	sbci	r25, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <main+0x3c>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0x46>
 5a6:	00 00       	nop
	_delay_ms(1000);
	User_login();
 5a8:	0e 94 3c 05 	call	0xa78	; 0xa78 <User_login>
	menu();	
 5ac:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <menu>
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	08 95       	ret

000005b6 <get_answer>:
void Servo_close(void);
void Buzzer(void);


unsigned char get_answer(void)
{
 5b6:	cf 93       	push	r28
			unsigned char k=0xFF;
 5b8:	cf ef       	ldi	r28, 0xFF	; 255
			while(k==notpressed)
 5ba:	10 c0       	rjmp	.+32     	; 0x5dc <get_answer+0x26>
			{
			k=get_key_value();
 5bc:	0e 94 df 00 	call	0x1be	; 0x1be <get_key_value>
 5c0:	c8 2f       	mov	r28, r24
			if(k!=notpressed)
 5c2:	8f 3f       	cpi	r24, 0xFF	; 255
 5c4:	11 f0       	breq	.+4      	; 0x5ca <get_answer+0x14>
			LCD_send_data_4bit(k);
 5c6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_send_data_4bit>
			SPI_Write(0XFF);
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 5d0:	83 ed       	ldi	r24, 0xD3	; 211
 5d2:	90 e3       	ldi	r25, 0x30	; 48
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <get_answer+0x1e>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <get_answer+0x24>
 5da:	00 00       	nop


unsigned char get_answer(void)
{
			unsigned char k=0xFF;
			while(k==notpressed)
 5dc:	cf 3f       	cpi	r28, 0xFF	; 255
 5de:	71 f3       	breq	.-36     	; 0x5bc <get_answer+0x6>
			LCD_send_data_4bit(k);
			SPI_Write(0XFF);
			_delay_ms(50);
			}
			return k;
}
 5e0:	8c 2f       	mov	r24, r28
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <menu>:

void menu(void)
{	
	int Menu_flag=0;
 5e6:	c0 e0       	ldi	r28, 0x00	; 0
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <menu+0xa>
		if(choice=='1')
		{SPI_Write(0xA3);}
		if(choice=='2')
		{SPI_Write(0xA4);}
		if(choice=='0')
		{Menu_flag=4;}
 5ec:	c4 e0       	ldi	r28, 0x04	; 4
 5ee:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char choice=0xFF;
	
	while(1)
	{
	
	if(Menu_flag==0)
 5f0:	20 97       	sbiw	r28, 0x00	; 0
 5f2:	21 f5       	brne	.+72     	; 0x63c <menu+0x56>
	{
		LCD_Clear();
 5f4:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 5f8:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("User Mode  R:1");
 5fc:	81 e7       	ldi	r24, 0x71	; 113
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 604:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("Dim:2 AC:3 ~:4");
 608:	80 e8       	ldi	r24, 0x80	; 128
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		choice=get_answer();
 610:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
		
		//Main Menu
		/////////////////////////
		if(choice=='1')
 614:	81 33       	cpi	r24, 0x31	; 49
 616:	39 f0       	breq	.+14     	; 0x626 <menu+0x40>
		{
		Menu_flag=1;	
		}
		else if(choice=='2')
 618:	82 33       	cpi	r24, 0x32	; 50
 61a:	41 f0       	breq	.+16     	; 0x62c <menu+0x46>
		{
		Menu_flag=2;	
		}		
		else if(choice=='3')
 61c:	83 33       	cpi	r24, 0x33	; 51
 61e:	49 f0       	breq	.+18     	; 0x632 <menu+0x4c>
		{
		Menu_flag=3;	
		}
		else if(choice=='4')
 620:	84 33       	cpi	r24, 0x34	; 52
 622:	61 f4       	brne	.+24     	; 0x63c <menu+0x56>
 624:	09 c0       	rjmp	.+18     	; 0x638 <menu+0x52>
		
		//Main Menu
		/////////////////////////
		if(choice=='1')
		{
		Menu_flag=1;	
 626:	c1 e0       	ldi	r28, 0x01	; 1
 628:	d0 e0       	ldi	r29, 0x00	; 0
 62a:	08 c0       	rjmp	.+16     	; 0x63c <menu+0x56>
		}
		else if(choice=='2')
		{
		Menu_flag=2;	
 62c:	c2 e0       	ldi	r28, 0x02	; 2
 62e:	d0 e0       	ldi	r29, 0x00	; 0
 630:	05 c0       	rjmp	.+10     	; 0x63c <menu+0x56>
		}		
		else if(choice=='3')
		{
		Menu_flag=3;	
 632:	c3 e0       	ldi	r28, 0x03	; 3
 634:	d0 e0       	ldi	r29, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <menu+0x56>
		}
		else if(choice=='4')
		{
		Menu_flag=4;	
 638:	c4 e0       	ldi	r28, 0x04	; 4
 63a:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}//0
	////////////////////////////
	
	if(Menu_flag==1)
 63c:	c1 30       	cpi	r28, 0x01	; 1
 63e:	d1 05       	cpc	r29, r1
 640:	09 f0       	breq	.+2      	; 0x644 <menu+0x5e>
 642:	6f c0       	rjmp	.+222    	; 0x722 <menu+0x13c>
	{
	LCD_Clear();
 644:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
	LCD_Home();
 648:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
	LCD_send_string_4bit("R1:1 R2:2 R3:3");
 64c:	8f e8       	ldi	r24, 0x8F	; 143
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
	LCD_Next_Line();
 654:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
	LCD_send_string_4bit("R4:4 R5:5 Ret.:0");		
 658:	8e e9       	ldi	r24, 0x9E	; 158
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
	choice=get_answer();
 660:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 664:	18 2f       	mov	r17, r24
	//Bulbs
	////////////////////////////
	if(choice=='1')
 666:	81 33       	cpi	r24, 0x31	; 49
 668:	81 f4       	brne	.+32     	; 0x68a <menu+0xa4>
	{
	LCD_Clear();
 66a:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
	LCD_Home();	
 66e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
	LCD_send_string_4bit("Room1 Lights");
 672:	8f ea       	ldi	r24, 0xAF	; 175
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
	LCD_Next_Line();
 67a:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
	LCD_send_string_4bit("On:1 Off:2 Ret:0");
 67e:	8c eb       	ldi	r24, 0xBC	; 188
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
	Menu_flag=5;
 686:	c5 e0       	ldi	r28, 0x05	; 5
 688:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='2')
 68a:	12 33       	cpi	r17, 0x32	; 50
 68c:	81 f4       	brne	.+32     	; 0x6ae <menu+0xc8>
	{
		LCD_Clear();
 68e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 692:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Room2 Lights");
 696:	8d ec       	ldi	r24, 0xCD	; 205
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 69e:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 6a2:	8c eb       	ldi	r24, 0xBC	; 188
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		Menu_flag=6;
 6aa:	c6 e0       	ldi	r28, 0x06	; 6
 6ac:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(choice=='3')
 6ae:	13 33       	cpi	r17, 0x33	; 51
 6b0:	81 f4       	brne	.+32     	; 0x6d2 <menu+0xec>
	{
		LCD_Clear();
 6b2:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 6b6:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Room3 Lights");
 6ba:	8a ed       	ldi	r24, 0xDA	; 218
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 6c2:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 6c6:	8c eb       	ldi	r24, 0xBC	; 188
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		Menu_flag=7;
 6ce:	c7 e0       	ldi	r28, 0x07	; 7
 6d0:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='4')
 6d2:	14 33       	cpi	r17, 0x34	; 52
 6d4:	81 f4       	brne	.+32     	; 0x6f6 <menu+0x110>
	{
		LCD_Clear();
 6d6:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 6da:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Room4 Lights");
 6de:	87 ee       	ldi	r24, 0xE7	; 231
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 6e6:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 6ea:	8c eb       	ldi	r24, 0xBC	; 188
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		Menu_flag=8;
 6f2:	c8 e0       	ldi	r28, 0x08	; 8
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='5')
 6f6:	15 33       	cpi	r17, 0x35	; 53
 6f8:	81 f4       	brne	.+32     	; 0x71a <menu+0x134>
	{
		LCD_Clear();
 6fa:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 6fe:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Room5 Lights");
 702:	84 ef       	ldi	r24, 0xF4	; 244
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 70a:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 70e:	8c eb       	ldi	r24, 0xBC	; 188
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		Menu_flag=9;
 716:	c9 e0       	ldi	r28, 0x09	; 9
 718:	d0 e0       	ldi	r29, 0x00	; 0
	}			
	if(choice=='0')
 71a:	10 33       	cpi	r17, 0x30	; 48
 71c:	11 f4       	brne	.+4      	; 0x722 <menu+0x13c>
	{
		Menu_flag=0;
 71e:	c0 e0       	ldi	r28, 0x00	; 0
 720:	d0 e0       	ldi	r29, 0x00	; 0
	}
		
	}//1
	if(Menu_flag==5)
 722:	c5 30       	cpi	r28, 0x05	; 5
 724:	d1 05       	cpc	r29, r1
 726:	e9 f4       	brne	.+58     	; 0x762 <menu+0x17c>
	{
		choice=get_answer();
 728:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 72c:	18 2f       	mov	r17, r24
		if(choice=='1')
 72e:	81 33       	cpi	r24, 0x31	; 49
 730:	49 f4       	brne	.+18     	; 0x744 <menu+0x15e>
		{
		SPI_Write(1);
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 738:	87 ea       	ldi	r24, 0xA7	; 167
 73a:	91 e6       	ldi	r25, 0x61	; 97
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <menu+0x156>
 740:	00 c0       	rjmp	.+0      	; 0x742 <menu+0x15c>
 742:	00 00       	nop
		_delay_ms(100);
		}
		if(choice=='2')
 744:	12 33       	cpi	r17, 0x32	; 50
 746:	49 f4       	brne	.+18     	; 0x75a <menu+0x174>
		{
		SPI_Write(2);
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 74e:	e7 ea       	ldi	r30, 0xA7	; 167
 750:	f1 e6       	ldi	r31, 0x61	; 97
 752:	31 97       	sbiw	r30, 0x01	; 1
 754:	f1 f7       	brne	.-4      	; 0x752 <menu+0x16c>
 756:	00 c0       	rjmp	.+0      	; 0x758 <menu+0x172>
 758:	00 00       	nop
		_delay_ms(100);
		}	
		if(choice=='0')
 75a:	10 33       	cpi	r17, 0x30	; 48
 75c:	11 f4       	brne	.+4      	; 0x762 <menu+0x17c>
		{Menu_flag=1;}		
 75e:	c1 e0       	ldi	r28, 0x01	; 1
 760:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(Menu_flag==6)
 762:	c6 30       	cpi	r28, 0x06	; 6
 764:	d1 05       	cpc	r29, r1
 766:	e9 f4       	brne	.+58     	; 0x7a2 <menu+0x1bc>
	{
		choice=get_answer();
 768:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 76c:	18 2f       	mov	r17, r24
		if(choice=='1')
 76e:	81 33       	cpi	r24, 0x31	; 49
 770:	49 f4       	brne	.+18     	; 0x784 <menu+0x19e>
		{		
			SPI_Write(3);
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 778:	87 ea       	ldi	r24, 0xA7	; 167
 77a:	91 e6       	ldi	r25, 0x61	; 97
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	f1 f7       	brne	.-4      	; 0x77c <menu+0x196>
 780:	00 c0       	rjmp	.+0      	; 0x782 <menu+0x19c>
 782:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 784:	12 33       	cpi	r17, 0x32	; 50
 786:	49 f4       	brne	.+18     	; 0x79a <menu+0x1b4>
		{		
			SPI_Write(4);
 788:	84 e0       	ldi	r24, 0x04	; 4
 78a:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 78e:	e7 ea       	ldi	r30, 0xA7	; 167
 790:	f1 e6       	ldi	r31, 0x61	; 97
 792:	31 97       	sbiw	r30, 0x01	; 1
 794:	f1 f7       	brne	.-4      	; 0x792 <menu+0x1ac>
 796:	00 c0       	rjmp	.+0      	; 0x798 <menu+0x1b2>
 798:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 79a:	10 33       	cpi	r17, 0x30	; 48
 79c:	11 f4       	brne	.+4      	; 0x7a2 <menu+0x1bc>
		{Menu_flag=1;}
 79e:	c1 e0       	ldi	r28, 0x01	; 1
 7a0:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(Menu_flag==7)
 7a2:	c7 30       	cpi	r28, 0x07	; 7
 7a4:	d1 05       	cpc	r29, r1
 7a6:	e9 f4       	brne	.+58     	; 0x7e2 <menu+0x1fc>
	{
		choice=get_answer();
 7a8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 7ac:	18 2f       	mov	r17, r24
		if(choice=='1')
 7ae:	81 33       	cpi	r24, 0x31	; 49
 7b0:	49 f4       	brne	.+18     	; 0x7c4 <menu+0x1de>
		{		
			SPI_Write(5);
 7b2:	85 e0       	ldi	r24, 0x05	; 5
 7b4:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 7b8:	87 ea       	ldi	r24, 0xA7	; 167
 7ba:	91 e6       	ldi	r25, 0x61	; 97
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <menu+0x1d6>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <menu+0x1dc>
 7c2:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 7c4:	12 33       	cpi	r17, 0x32	; 50
 7c6:	49 f4       	brne	.+18     	; 0x7da <menu+0x1f4>
		{		
			SPI_Write(6);
 7c8:	86 e0       	ldi	r24, 0x06	; 6
 7ca:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 7ce:	e7 ea       	ldi	r30, 0xA7	; 167
 7d0:	f1 e6       	ldi	r31, 0x61	; 97
 7d2:	31 97       	sbiw	r30, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <menu+0x1ec>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <menu+0x1f2>
 7d8:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 7da:	10 33       	cpi	r17, 0x30	; 48
 7dc:	11 f4       	brne	.+4      	; 0x7e2 <menu+0x1fc>
		{Menu_flag=1;}
 7de:	c1 e0       	ldi	r28, 0x01	; 1
 7e0:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	if(Menu_flag==8)
 7e2:	c8 30       	cpi	r28, 0x08	; 8
 7e4:	d1 05       	cpc	r29, r1
 7e6:	e9 f4       	brne	.+58     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		choice=get_answer();
 7e8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 7ec:	18 2f       	mov	r17, r24
		if(choice=='1')
 7ee:	81 33       	cpi	r24, 0x31	; 49
 7f0:	49 f4       	brne	.+18     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		{		
			SPI_Write(7);
 7f2:	87 e0       	ldi	r24, 0x07	; 7
 7f4:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 7f8:	87 ea       	ldi	r24, 0xA7	; 167
 7fa:	91 e6       	ldi	r25, 0x61	; 97
 7fc:	01 97       	sbiw	r24, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <menu+0x216>
 800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 802:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 804:	12 33       	cpi	r17, 0x32	; 50
 806:	49 f4       	brne	.+18     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		{		
			SPI_Write(8);
 808:	88 e0       	ldi	r24, 0x08	; 8
 80a:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 80e:	e7 ea       	ldi	r30, 0xA7	; 167
 810:	f1 e6       	ldi	r31, 0x61	; 97
 812:	31 97       	sbiw	r30, 0x01	; 1
 814:	f1 f7       	brne	.-4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 816:	00 c0       	rjmp	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 818:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 81a:	10 33       	cpi	r17, 0x30	; 48
 81c:	11 f4       	brne	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		{Menu_flag=1;}
 81e:	c1 e0       	ldi	r28, 0x01	; 1
 820:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(Menu_flag==9)
 822:	c9 30       	cpi	r28, 0x09	; 9
 824:	d1 05       	cpc	r29, r1
 826:	e9 f4       	brne	.+58     	; 0x862 <__stack+0x3>
	{
		choice=get_answer();
 828:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 82c:	18 2f       	mov	r17, r24
		if(choice=='1')
 82e:	81 33       	cpi	r24, 0x31	; 49
 830:	49 f4       	brne	.+18     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		{		
			SPI_Write(9);
 832:	89 e0       	ldi	r24, 0x09	; 9
 834:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 838:	87 ea       	ldi	r24, 0xA7	; 167
 83a:	91 e6       	ldi	r25, 0x61	; 97
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	f1 f7       	brne	.-4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 840:	00 c0       	rjmp	.+0      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 842:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 844:	12 33       	cpi	r17, 0x32	; 50
 846:	49 f4       	brne	.+18     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		{		
			SPI_Write(0);
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 84e:	e7 ea       	ldi	r30, 0xA7	; 167
 850:	f1 e6       	ldi	r31, 0x61	; 97
 852:	31 97       	sbiw	r30, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 856:	00 c0       	rjmp	.+0      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 858:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 85a:	10 33       	cpi	r17, 0x30	; 48
 85c:	11 f4       	brne	.+4      	; 0x862 <__stack+0x3>
		{Menu_flag=1;}
 85e:	c1 e0       	ldi	r28, 0x01	; 1
 860:	d0 e0       	ldi	r29, 0x00	; 0
	}
	//Dimmer
	///////////////////////////
	if(Menu_flag==2)
 862:	c2 30       	cpi	r28, 0x02	; 2
 864:	d1 05       	cpc	r29, r1
 866:	09 f0       	breq	.+2      	; 0x86a <__stack+0xb>
 868:	4c c0       	rjmp	.+152    	; 0x902 <__stack+0xa3>
	{
		LCD_Clear();
 86a:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 86e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Dimmer:1~5");
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	91 e0       	ldi	r25, 0x01	; 1
 876:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 87a:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("Ret:0");
 87e:	8f e6       	ldi	r24, 0x6F	; 111
 880:	91 e0       	ldi	r25, 0x01	; 1
 882:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		choice=get_answer();
 886:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 88a:	18 2f       	mov	r17, r24
		if(choice=='1')
 88c:	81 33       	cpi	r24, 0x31	; 49
 88e:	49 f4       	brne	.+18     	; 0x8a2 <__stack+0x43>
		{
			SPI_Write(0X0A);
 890:	8a e0       	ldi	r24, 0x0A	; 10
 892:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 896:	87 ea       	ldi	r24, 0xA7	; 167
 898:	91 e6       	ldi	r25, 0x61	; 97
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	f1 f7       	brne	.-4      	; 0x89a <__stack+0x3b>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <__stack+0x41>
 8a0:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 8a2:	12 33       	cpi	r17, 0x32	; 50
 8a4:	49 f4       	brne	.+18     	; 0x8b8 <__stack+0x59>
		{
			SPI_Write(0X0B);
 8a6:	8b e0       	ldi	r24, 0x0B	; 11
 8a8:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 8ac:	e7 ea       	ldi	r30, 0xA7	; 167
 8ae:	f1 e6       	ldi	r31, 0x61	; 97
 8b0:	31 97       	sbiw	r30, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__stack+0x51>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <__stack+0x57>
 8b6:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='3')
 8b8:	13 33       	cpi	r17, 0x33	; 51
 8ba:	49 f4       	brne	.+18     	; 0x8ce <__stack+0x6f>
		{
			SPI_Write(0X0C);
 8bc:	8c e0       	ldi	r24, 0x0C	; 12
 8be:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 8c2:	87 ea       	ldi	r24, 0xA7	; 167
 8c4:	91 e6       	ldi	r25, 0x61	; 97
 8c6:	01 97       	sbiw	r24, 0x01	; 1
 8c8:	f1 f7       	brne	.-4      	; 0x8c6 <__stack+0x67>
 8ca:	00 c0       	rjmp	.+0      	; 0x8cc <__stack+0x6d>
 8cc:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='4')
 8ce:	14 33       	cpi	r17, 0x34	; 52
 8d0:	49 f4       	brne	.+18     	; 0x8e4 <__stack+0x85>
		{
			SPI_Write(0X0D);
 8d2:	8d e0       	ldi	r24, 0x0D	; 13
 8d4:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 8d8:	e7 ea       	ldi	r30, 0xA7	; 167
 8da:	f1 e6       	ldi	r31, 0x61	; 97
 8dc:	31 97       	sbiw	r30, 0x01	; 1
 8de:	f1 f7       	brne	.-4      	; 0x8dc <__stack+0x7d>
 8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__stack+0x83>
 8e2:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='5')
 8e4:	15 33       	cpi	r17, 0x35	; 53
 8e6:	49 f4       	brne	.+18     	; 0x8fa <__stack+0x9b>
		{
			SPI_Write(0X0E);
 8e8:	8e e0       	ldi	r24, 0x0E	; 14
 8ea:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 8ee:	87 ea       	ldi	r24, 0xA7	; 167
 8f0:	91 e6       	ldi	r25, 0x61	; 97
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	f1 f7       	brne	.-4      	; 0x8f2 <__stack+0x93>
 8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__stack+0x99>
 8f8:	00 00       	nop
			_delay_ms(100);
		}										
		if(choice=='0')
 8fa:	10 33       	cpi	r17, 0x30	; 48
 8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0xa3>
		{Menu_flag=0;}
 8fe:	c0 e0       	ldi	r28, 0x00	; 0
 900:	d0 e0       	ldi	r29, 0x00	; 0
				
	}
	if(Menu_flag==3)
 902:	c3 30       	cpi	r28, 0x03	; 3
 904:	d1 05       	cpc	r29, r1
 906:	b1 f5       	brne	.+108    	; 0x974 <__stack+0x115>
	{
		LCD_Clear();
 908:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 90c:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Air Cond. Auto:1");
 910:	8c e0       	ldi	r24, 0x0C	; 12
 912:	91 e0       	ldi	r25, 0x01	; 1
 914:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 918:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:2 Off:3 Ret:0");
 91c:	8d e1       	ldi	r24, 0x1D	; 29
 91e:	91 e0       	ldi	r25, 0x01	; 1
 920:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		choice=get_answer();
 924:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 928:	18 2f       	mov	r17, r24
		if(choice=='1')
 92a:	81 33       	cpi	r24, 0x31	; 49
 92c:	49 f4       	brne	.+18     	; 0x940 <__stack+0xe1>
		{
			SPI_Write(0X0F);
 92e:	8f e0       	ldi	r24, 0x0F	; 15
 930:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 934:	e7 ea       	ldi	r30, 0xA7	; 167
 936:	f1 e6       	ldi	r31, 0x61	; 97
 938:	31 97       	sbiw	r30, 0x01	; 1
 93a:	f1 f7       	brne	.-4      	; 0x938 <__stack+0xd9>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
 93e:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 940:	12 33       	cpi	r17, 0x32	; 50
 942:	49 f4       	brne	.+18     	; 0x956 <__stack+0xf7>
		{
			SPI_Write(0XA0);
 944:	80 ea       	ldi	r24, 0xA0	; 160
 946:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 94a:	87 ea       	ldi	r24, 0xA7	; 167
 94c:	91 e6       	ldi	r25, 0x61	; 97
 94e:	01 97       	sbiw	r24, 0x01	; 1
 950:	f1 f7       	brne	.-4      	; 0x94e <__stack+0xef>
 952:	00 c0       	rjmp	.+0      	; 0x954 <__stack+0xf5>
 954:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='3')
 956:	13 33       	cpi	r17, 0x33	; 51
 958:	49 f4       	brne	.+18     	; 0x96c <__stack+0x10d>
		{
			SPI_Write(0XA1);
 95a:	81 ea       	ldi	r24, 0xA1	; 161
 95c:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 960:	e7 ea       	ldi	r30, 0xA7	; 167
 962:	f1 e6       	ldi	r31, 0x61	; 97
 964:	31 97       	sbiw	r30, 0x01	; 1
 966:	f1 f7       	brne	.-4      	; 0x964 <__stack+0x105>
 968:	00 c0       	rjmp	.+0      	; 0x96a <__stack+0x10b>
 96a:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 96c:	10 33       	cpi	r17, 0x30	; 48
 96e:	11 f4       	brne	.+4      	; 0x974 <__stack+0x115>
		{Menu_flag=0;}
 970:	c0 e0       	ldi	r28, 0x00	; 0
 972:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
	if(Menu_flag==4)
 974:	c4 30       	cpi	r28, 0x04	; 4
 976:	d1 05       	cpc	r29, r1
 978:	e1 f4       	brne	.+56     	; 0x9b2 <__stack+0x153>
	{
		LCD_Clear();
 97a:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 97e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Temp:4");
 982:	8e e2       	ldi	r24, 0x2E	; 46
 984:	91 e0       	ldi	r25, 0x01	; 1
 986:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 98a:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("Door:5 Ret:0");
 98e:	85 e3       	ldi	r24, 0x35	; 53
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		choice=get_answer();
 996:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
		if(choice=='4')
 99a:	84 33       	cpi	r24, 0x34	; 52
 99c:	11 f4       	brne	.+4      	; 0x9a2 <__stack+0x143>
		{Menu_flag=10;}
 99e:	ca e0       	ldi	r28, 0x0A	; 10
 9a0:	d0 e0       	ldi	r29, 0x00	; 0
		if(choice=='5')
 9a2:	85 33       	cpi	r24, 0x35	; 53
 9a4:	11 f4       	brne	.+4      	; 0x9aa <__stack+0x14b>
		{Menu_flag=11;}
 9a6:	cb e0       	ldi	r28, 0x0B	; 11
 9a8:	d0 e0       	ldi	r29, 0x00	; 0
		if(choice=='0')
 9aa:	80 33       	cpi	r24, 0x30	; 48
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <__stack+0x153>
		{Menu_flag=0;}	
 9ae:	c0 e0       	ldi	r28, 0x00	; 0
 9b0:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(Menu_flag==10)
 9b2:	ca 30       	cpi	r28, 0x0A	; 10
 9b4:	d1 05       	cpc	r29, r1
 9b6:	e9 f5       	brne	.+122    	; 0xa32 <__stack+0x1d3>
	{
		LCD_Clear();
 9b8:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 9bc:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Temp. Set(21~27)");
 9c0:	82 e4       	ldi	r24, 0x42	; 66
 9c2:	91 e0       	ldi	r25, 0x01	; 1
 9c4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 9c8:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("Temp.:");
 9cc:	83 e5       	ldi	r24, 0x53	; 83
 9ce:	91 e0       	ldi	r25, 0x01	; 1
 9d0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		SPI_Write(0xA2);
 9d4:	82 ea       	ldi	r24, 0xA2	; 162
 9d6:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
 9da:	87 ea       	ldi	r24, 0xA7	; 167
 9dc:	91 e6       	ldi	r25, 0x61	; 97
 9de:	01 97       	sbiw	r24, 0x01	; 1
 9e0:	f1 f7       	brne	.-4      	; 0x9de <__stack+0x17f>
 9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <__stack+0x185>
 9e4:	00 00       	nop
		_delay_ms(100);
		unsigned int read=0xFF;
		read=SPI_Read();
 9e6:	0e 94 a1 02 	call	0x542	; 0x542 <SPI_Read>
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	e7 ea       	ldi	r30, 0xA7	; 167
 9f0:	f1 e6       	ldi	r31, 0x61	; 97
 9f2:	31 97       	sbiw	r30, 0x01	; 1
 9f4:	f1 f7       	brne	.-4      	; 0x9f2 <__stack+0x193>
 9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <__stack+0x199>
 9f8:	00 00       	nop
		_delay_ms(100);
		if(read!=0xFF)
 9fa:	2f 3f       	cpi	r18, 0xFF	; 255
 9fc:	31 05       	cpc	r19, r1
 9fe:	19 f0       	breq	.+6      	; 0xa06 <__stack+0x1a7>
		Int_ASC(read);
 a00:	c9 01       	movw	r24, r18
 a02:	0e 94 07 02 	call	0x40e	; 0x40e <Int_ASC>
		read=0xFF;
		read=SPI_Read();
 a06:	0e 94 a1 02 	call	0x542	; 0x542 <SPI_Read>
 a0a:	28 2f       	mov	r18, r24
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	e7 ea       	ldi	r30, 0xA7	; 167
 a10:	f1 e6       	ldi	r31, 0x61	; 97
 a12:	31 97       	sbiw	r30, 0x01	; 1
 a14:	f1 f7       	brne	.-4      	; 0xa12 <__stack+0x1b3>
 a16:	00 c0       	rjmp	.+0      	; 0xa18 <__stack+0x1b9>
 a18:	00 00       	nop
		_delay_ms(100);
		if(read!=0xFF)
 a1a:	2f 3f       	cpi	r18, 0xFF	; 255
 a1c:	31 05       	cpc	r19, r1
 a1e:	19 f0       	breq	.+6      	; 0xa26 <__stack+0x1c7>
		Int_ASC(read);		
 a20:	c9 01       	movw	r24, r18
 a22:	0e 94 07 02 	call	0x40e	; 0x40e <Int_ASC>
		choice=get_answer();
 a26:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
		if(choice=='0')
 a2a:	80 33       	cpi	r24, 0x30	; 48
 a2c:	11 f4       	brne	.+4      	; 0xa32 <__stack+0x1d3>
		{Menu_flag=4;}
 a2e:	c4 e0       	ldi	r28, 0x04	; 4
 a30:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(Menu_flag==11)
 a32:	cb 30       	cpi	r28, 0x0B	; 11
 a34:	d1 05       	cpc	r29, r1
 a36:	09 f0       	breq	.+2      	; 0xa3a <__stack+0x1db>
 a38:	db cd       	rjmp	.-1098   	; 0x5f0 <menu+0xa>
	{
		LCD_Clear();
 a3a:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 a3e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("Door: Open:1");
 a42:	8a e5       	ldi	r24, 0x5A	; 90
 a44:	91 e0       	ldi	r25, 0x01	; 1
 a46:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 a4a:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("Close:2 Ret:0");
 a4e:	87 e6       	ldi	r24, 0x67	; 103
 a50:	91 e0       	ldi	r25, 0x01	; 1
 a52:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		choice=get_answer();
 a56:	0e 94 db 02 	call	0x5b6	; 0x5b6 <get_answer>
 a5a:	18 2f       	mov	r17, r24
		if(choice=='1')
 a5c:	81 33       	cpi	r24, 0x31	; 49
 a5e:	19 f4       	brne	.+6      	; 0xa66 <__stack+0x207>
		{SPI_Write(0xA3);}
 a60:	83 ea       	ldi	r24, 0xA3	; 163
 a62:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
		if(choice=='2')
 a66:	12 33       	cpi	r17, 0x32	; 50
 a68:	19 f4       	brne	.+6      	; 0xa70 <__stack+0x211>
		{SPI_Write(0xA4);}
 a6a:	84 ea       	ldi	r24, 0xA4	; 164
 a6c:	0e 94 9d 02 	call	0x53a	; 0x53a <SPI_Write>
		if(choice=='0')
 a70:	10 33       	cpi	r17, 0x30	; 48
 a72:	09 f0       	breq	.+2      	; 0xa76 <__stack+0x217>
 a74:	bd cd       	rjmp	.-1158   	; 0x5f0 <menu+0xa>
 a76:	ba cd       	rjmp	.-1164   	; 0x5ec <menu+0x6>

00000a78 <User_login>:
void Servo_close(void);
void Buzzer(void);


void User_login(void)
{
 a78:	ef 92       	push	r14
 a7a:	ff 92       	push	r15
 a7c:	0f 93       	push	r16
 a7e:	1f 93       	push	r17
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	00 d0       	rcall	.+0      	; 0xa86 <User_login+0xe>
 a86:	00 d0       	rcall	.+0      	; 0xa88 <User_login+0x10>
 a88:	cd b7       	in	r28, 0x3d	; 61
 a8a:	de b7       	in	r29, 0x3e	; 62
		
		char pass_flag=0;
		char saved_pass[4]={'1','2','3','4'};
 a8c:	81 e3       	ldi	r24, 0x31	; 49
 a8e:	89 83       	std	Y+1, r24	; 0x01
 a90:	82 e3       	ldi	r24, 0x32	; 50
 a92:	8a 83       	std	Y+2, r24	; 0x02
 a94:	83 e3       	ldi	r24, 0x33	; 51
 a96:	8b 83       	std	Y+3, r24	; 0x03
 a98:	84 e3       	ldi	r24, 0x34	; 52
 a9a:	8c 83       	std	Y+4, r24	; 0x04
		char k=0xFF;
		char pass[4];
		
		LCD_Clear();
 a9c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
		LCD_Home();
 aa0:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
		LCD_send_string_4bit("User Pass:");
 aa4:	85 e7       	ldi	r24, 0x75	; 117
 aa6:	91 e0       	ldi	r25, 0x01	; 1
 aa8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
		LCD_Next_Line();
 aac:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>


void User_login(void)
{
		
		char pass_flag=0;
 ab0:	00 e0       	ldi	r16, 0x00	; 0
		LCD_Clear();
		LCD_Home();
		LCD_send_string_4bit("User Pass:");
		LCD_Next_Line();
				
		while(pass_flag!=4)
 ab2:	69 c0       	rjmp	.+210    	; 0xb86 <User_login+0x10e>
		for(int i=0;i<4;i++)
		{
		k=0xFF;	
		while(k==0xFF)
		{
			k=get_key_value();
 ab4:	0e 94 df 00 	call	0x1be	; 0x1be <get_key_value>
 ab8:	18 2f       	mov	r17, r24
			if(k!=0xff)
 aba:	8f 3f       	cpi	r24, 0xFF	; 255
 abc:	21 f0       	breq	.+8      	; 0xac6 <User_login+0x4e>
			LCD_send_data_4bit(k);
 abe:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_send_data_4bit>
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <User_login+0x4e>
 ac4:	1f ef       	ldi	r17, 0xFF	; 255
			
		pass_flag=0;
		for(int i=0;i<4;i++)
		{
		k=0xFF;	
		while(k==0xFF)
 ac6:	1f 3f       	cpi	r17, 0xFF	; 255
 ac8:	a9 f3       	breq	.-22     	; 0xab4 <User_login+0x3c>
			k=get_key_value();
			if(k!=0xff)
			LCD_send_data_4bit(k);
		}
		pass[i]=k;
		if(pass[i]==saved_pass[i])
 aca:	e1 e0       	ldi	r30, 0x01	; 1
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	ec 0f       	add	r30, r28
 ad0:	fd 1f       	adc	r31, r29
 ad2:	ee 0d       	add	r30, r14
 ad4:	ff 1d       	adc	r31, r15
 ad6:	80 81       	ld	r24, Z
 ad8:	18 13       	cpse	r17, r24
 ada:	01 c0       	rjmp	.+2      	; 0xade <User_login+0x66>
		pass_flag++;
 adc:	0f 5f       	subi	r16, 0xFF	; 255
				
		while(pass_flag!=4)
		{
			
		pass_flag=0;
		for(int i=0;i<4;i++)
 ade:	2f ef       	ldi	r18, 0xFF	; 255
 ae0:	e2 1a       	sub	r14, r18
 ae2:	f2 0a       	sbc	r15, r18
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <User_login+0x74>
 ae6:	e1 2c       	mov	r14, r1
 ae8:	f1 2c       	mov	r15, r1
 aea:	00 e0       	ldi	r16, 0x00	; 0
 aec:	84 e0       	ldi	r24, 0x04	; 4
 aee:	e8 16       	cp	r14, r24
 af0:	f1 04       	cpc	r15, r1
 af2:	44 f3       	brlt	.-48     	; 0xac4 <User_login+0x4c>
		pass[i]=k;
		if(pass[i]==saved_pass[i])
		pass_flag++;
		}
		
		if(pass_flag==4)
 af4:	04 30       	cpi	r16, 0x04	; 4
 af6:	f9 f4       	brne	.+62     	; 0xb36 <User_login+0xbe>
 af8:	9f e3       	ldi	r25, 0x3F	; 63
 afa:	2d e0       	ldi	r18, 0x0D	; 13
 afc:	83 e0       	ldi	r24, 0x03	; 3
 afe:	91 50       	subi	r25, 0x01	; 1
 b00:	20 40       	sbci	r18, 0x00	; 0
 b02:	80 40       	sbci	r24, 0x00	; 0
 b04:	e1 f7       	brne	.-8      	; 0xafe <User_login+0x86>
 b06:	00 c0       	rjmp	.+0      	; 0xb08 <User_login+0x90>
 b08:	00 00       	nop
		{
			_delay_ms(1000);
			LCD_Shift_Left();LCD_Shift_Left();
 b0a:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Shift_Left>
 b0e:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Shift_Left>
			LCD_Shift_Left();LCD_Shift_Left();
 b12:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Shift_Left>
 b16:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Shift_Left>
			LCD_send_string_4bit("Right Password");
 b1a:	80 e8       	ldi	r24, 0x80	; 128
 b1c:	91 e0       	ldi	r25, 0x01	; 1
 b1e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
 b22:	9f e7       	ldi	r25, 0x7F	; 127
 b24:	24 e8       	ldi	r18, 0x84	; 132
 b26:	8e e1       	ldi	r24, 0x1E	; 30
 b28:	91 50       	subi	r25, 0x01	; 1
 b2a:	20 40       	sbci	r18, 0x00	; 0
 b2c:	80 40       	sbci	r24, 0x00	; 0
 b2e:	e1 f7       	brne	.-8      	; 0xb28 <User_login+0xb0>
 b30:	00 c0       	rjmp	.+0      	; 0xb32 <User_login+0xba>
 b32:	00 00       	nop
 b34:	28 c0       	rjmp	.+80     	; 0xb86 <User_login+0x10e>
 b36:	9f e3       	ldi	r25, 0x3F	; 63
 b38:	2d e0       	ldi	r18, 0x0D	; 13
 b3a:	83 e0       	ldi	r24, 0x03	; 3
 b3c:	91 50       	subi	r25, 0x01	; 1
 b3e:	20 40       	sbci	r18, 0x00	; 0
 b40:	80 40       	sbci	r24, 0x00	; 0
 b42:	e1 f7       	brne	.-8      	; 0xb3c <User_login+0xc4>
 b44:	00 c0       	rjmp	.+0      	; 0xb46 <User_login+0xce>
 b46:	00 00       	nop
		    _delay_ms(10000);
		}
		else
		{
			_delay_ms(1000);
			LCD_Shift_Left();LCD_Shift_Left();
 b48:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Shift_Left>
 b4c:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Shift_Left>
			LCD_Shift_Left();LCD_Shift_Left();			
 b50:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Shift_Left>
 b54:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Shift_Left>
			LCD_send_string_4bit("Wrong Password");
 b58:	8f e8       	ldi	r24, 0x8F	; 143
 b5a:	91 e0       	ldi	r25, 0x01	; 1
 b5c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
 b60:	9f e7       	ldi	r25, 0x7F	; 127
 b62:	24 e8       	ldi	r18, 0x84	; 132
 b64:	8e e1       	ldi	r24, 0x1E	; 30
 b66:	91 50       	subi	r25, 0x01	; 1
 b68:	20 40       	sbci	r18, 0x00	; 0
 b6a:	80 40       	sbci	r24, 0x00	; 0
 b6c:	e1 f7       	brne	.-8      	; 0xb66 <User_login+0xee>
 b6e:	00 c0       	rjmp	.+0      	; 0xb70 <User_login+0xf8>
 b70:	00 00       	nop
			_delay_ms(10000);
			LCD_Clear();
 b72:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Clear>
			LCD_Home();
 b76:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Home>
			LCD_send_string_4bit("User Pass:");
 b7a:	85 e7       	ldi	r24, 0x75	; 117
 b7c:	91 e0       	ldi	r25, 0x01	; 1
 b7e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_send_string_4bit>
			LCD_Next_Line();
 b82:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_Clear();
		LCD_Home();
		LCD_send_string_4bit("User Pass:");
		LCD_Next_Line();
				
		while(pass_flag!=4)
 b86:	04 30       	cpi	r16, 0x04	; 4
 b88:	09 f0       	breq	.+2      	; 0xb8c <User_login+0x114>
 b8a:	ad cf       	rjmp	.-166    	; 0xae6 <User_login+0x6e>
			LCD_send_string_4bit("User Pass:");
			LCD_Next_Line();
		}
		}

}//void
 b8c:	0f 90       	pop	r0
 b8e:	0f 90       	pop	r0
 b90:	0f 90       	pop	r0
 b92:	0f 90       	pop	r0
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	ff 90       	pop	r15
 b9e:	ef 90       	pop	r14
 ba0:	08 95       	ret

00000ba2 <__umulhisi3>:
 ba2:	a2 9f       	mul	r26, r18
 ba4:	b0 01       	movw	r22, r0
 ba6:	b3 9f       	mul	r27, r19
 ba8:	c0 01       	movw	r24, r0
 baa:	a3 9f       	mul	r26, r19
 bac:	70 0d       	add	r23, r0
 bae:	81 1d       	adc	r24, r1
 bb0:	11 24       	eor	r1, r1
 bb2:	91 1d       	adc	r25, r1
 bb4:	b2 9f       	mul	r27, r18
 bb6:	70 0d       	add	r23, r0
 bb8:	81 1d       	adc	r24, r1
 bba:	11 24       	eor	r1, r1
 bbc:	91 1d       	adc	r25, r1
 bbe:	08 95       	ret

00000bc0 <_exit>:
 bc0:	f8 94       	cli

00000bc2 <__stop_program>:
 bc2:	ff cf       	rjmp	.-2      	; 0xbc2 <__stop_program>
